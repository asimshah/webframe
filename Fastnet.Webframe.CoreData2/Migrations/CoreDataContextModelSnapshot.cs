// <auto-generated />
using System;
using Fastnet.Webframe.CoreData2;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fastnet.Webframe.CoreData2.Migrations
{
    [DbContext(typeof(CoreDataContext))]
    partial class CoreDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("std")
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.ActionBase", b =>
                {
                    b.Property<long>("ActionBaseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<DateTimeOffset>("RecordedOn");

                    b.Property<string>("Remark");

                    b.HasKey("ActionBaseId");

                    b.ToTable("Actions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ActionBase");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.Directory", b =>
                {
                    b.Property<long>("DirectoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted");

                    b.Property<string>("Name")
                        .HasMaxLength(1024);

                    b.Property<long?>("OriginalFolderId");

                    b.Property<long?>("ParentDirectoryId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("DirectoryId");

                    b.HasIndex("ParentDirectoryId");

                    b.ToTable("Directories");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.DirectoryGroup", b =>
                {
                    b.Property<long>("DirectoryId");

                    b.Property<long>("GroupId");

                    b.Property<int>("Permission");

                    b.HasKey("DirectoryId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("DirectoryGroups");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.Document", b =>
                {
                    b.Property<long>("DocumentId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<byte[]>("Data");

                    b.Property<bool>("Deleted");

                    b.Property<long>("DirectoryId");

                    b.Property<string>("Extension");

                    b.Property<long>("Length");

                    b.Property<string>("MimeType");

                    b.Property<string>("Name");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Visible");

                    b.HasKey("DocumentId");

                    b.HasIndex("DirectoryId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.FileChunk", b =>
                {
                    b.Property<long>("FileChunkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Base64String");

                    b.Property<int>("ChunkNumber");

                    b.Property<long>("UploadFileId");

                    b.HasKey("FileChunkId");

                    b.HasIndex("UploadFileId");

                    b.ToTable("FileChunks");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.Group", b =>
                {
                    b.Property<long>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<long?>("ParentGroupId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Type")
                        .HasColumnName("TypeCode");

                    b.Property<int>("Weight");

                    b.HasKey("GroupId");

                    b.HasIndex("ParentGroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.GroupMember", b =>
                {
                    b.Property<long>("GroupId");

                    b.Property<string>("MemberId")
                        .HasMaxLength(128);

                    b.HasKey("GroupId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("GroupMember");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.Image", b =>
                {
                    b.Property<long>("ImageId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<byte[]>("Data");

                    b.Property<long>("Directory_DirectoryId");

                    b.Property<int>("Height");

                    b.Property<int>("ImageType");

                    b.Property<string>("Name");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Width");

                    b.HasKey("ImageId");

                    b.HasIndex("Directory_DirectoryId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.Member", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128);

                    b.Property<string>("ActivationCode")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("ActivationEmailSentDate");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("CreationMethod");

                    b.Property<bool>("Disabled");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailAddressConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(128);

                    b.Property<bool>("IsAdministrator");

                    b.Property<bool>("IsAnonymous");

                    b.Property<DateTime?>("LastLoginDate");

                    b.Property<string>("LastName")
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode");

                    b.Property<DateTime?>("PasswordResetEmailSentDate");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(128);

                    b.Property<string>("PlainPassword");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Member");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Index");

                    b.Property<long?>("Page_PageId");

                    b.Property<long?>("ParentMenu_Id");

                    b.Property<string>("Text");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("Page_PageId");

                    b.HasIndex("ParentMenu_Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.Page", b =>
                {
                    b.Property<long>("PageId");

                    b.Property<long>("DirectoryId");

                    b.Property<bool>("IsLandingPage");

                    b.Property<int>("MarkupType");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.HasKey("PageId");

                    b.HasIndex("DirectoryId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.PageDocument", b =>
                {
                    b.Property<long>("PageId");

                    b.Property<long>("DocumentId");

                    b.HasKey("PageId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("PageDocuments");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.PageMarkup", b =>
                {
                    b.Property<long>("PageId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<byte[]>("Data");

                    b.Property<string>("HtmlScripts");

                    b.Property<string>("HtmlStyles");

                    b.Property<string>("HtmlText");

                    b.Property<long>("HtmlTextLength");

                    b.Property<long>("MarkupLength");

                    b.Property<byte[]>("MiddleThumbNail");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTimeOffset?>("ModifiedOn");

                    b.Property<byte[]>("SmallThumbNail");

                    b.Property<byte[]>("ThumbNail");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("PageId");

                    b.ToTable("PageMarkups");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.PagePage", b =>
                {
                    b.Property<long>("FromPageId");

                    b.Property<long>("ToPageId");

                    b.HasKey("FromPageId", "ToPageId");

                    b.HasIndex("ToPageId");

                    b.ToTable("PagePages");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.SageTransaction", b =>
                {
                    b.Property<string>("VendorTxCode")
                        .HasMaxLength(128);

                    b.Property<string>("GuidUserKey")
                        .HasMaxLength(128);

                    b.Property<long>("LongUserKey");

                    b.Property<string>("RedirectUrl")
                        .HasMaxLength(255);

                    b.Property<string>("SecurityKey")
                        .HasMaxLength(16);

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("UserString")
                        .HasMaxLength(255);

                    b.Property<string>("VpsTxId")
                        .HasMaxLength(64);

                    b.HasKey("VendorTxCode");

                    b.ToTable("SageTransactions");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.SiteSetting", b =>
                {
                    b.Property<long>("SiteSettingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("SiteSettingId");

                    b.ToTable("SiteSettings");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.UploadFile", b =>
                {
                    b.Property<long>("UploadFileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BinaryLength");

                    b.Property<long>("DirectoryId");

                    b.Property<string>("Guid");

                    b.Property<string>("MimeType");

                    b.Property<string>("Name");

                    b.Property<long>("TotalChunks");

                    b.HasKey("UploadFileId");

                    b.ToTable("UploadFiles");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.Webtask", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128);

                    b.Property<DateTime>("FinishedAt");

                    b.Property<DateTime>("StartedAt");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Webtasks");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.ApplicationAction", b =>
                {
                    b.HasBaseType("Fastnet.Webframe.CoreData2.ActionBase");

                    b.Property<string>("SiteUrl");

                    b.Property<string>("Version");

                    b.ToTable("ApplicationAction");

                    b.HasDiscriminator().HasValue("ApplicationAction");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.DWHMember", b =>
                {
                    b.HasBaseType("Fastnet.Webframe.CoreData2.Member");

                    b.Property<string>("BMCMembership")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("BMCMembershipExpiresOn");

                    b.Property<bool>("BMCMembershipIsValid");

                    b.Property<DateTime?>("BMCMembershipValidatedOn");

                    b.Property<string>("Organisation")
                        .HasMaxLength(128);

                    b.ToTable("Members");

                    b.HasDiscriminator().HasValue("DWHMember");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.Directory", b =>
                {
                    b.HasOne("Fastnet.Webframe.CoreData2.Directory", "ParentDirectory")
                        .WithMany("SubDirectories")
                        .HasForeignKey("ParentDirectoryId");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.DirectoryGroup", b =>
                {
                    b.HasOne("Fastnet.Webframe.CoreData2.Directory", "Directory")
                        .WithMany("DirectoryGroups")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fastnet.Webframe.CoreData2.Group", "Group")
                        .WithMany("DirectoryGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.Document", b =>
                {
                    b.HasOne("Fastnet.Webframe.CoreData2.Directory", "Directory")
                        .WithMany("Documents")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.FileChunk", b =>
                {
                    b.HasOne("Fastnet.Webframe.CoreData2.UploadFile", "UploadFile")
                        .WithMany("FileChunks")
                        .HasForeignKey("UploadFileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.Group", b =>
                {
                    b.HasOne("Fastnet.Webframe.CoreData2.Group", "ParentGroup")
                        .WithMany("Children")
                        .HasForeignKey("ParentGroupId");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.GroupMember", b =>
                {
                    b.HasOne("Fastnet.Webframe.CoreData2.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fastnet.Webframe.CoreData2.Member", "Member")
                        .WithMany("GroupMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.Image", b =>
                {
                    b.HasOne("Fastnet.Webframe.CoreData2.Directory", "Directory")
                        .WithMany("Images")
                        .HasForeignKey("Directory_DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.Menu", b =>
                {
                    b.HasOne("Fastnet.Webframe.CoreData2.Page", "Page")
                        .WithMany("Menus")
                        .HasForeignKey("Page_PageId");

                    b.HasOne("Fastnet.Webframe.CoreData2.Menu", "ParentMenu")
                        .WithMany("Submenus")
                        .HasForeignKey("ParentMenu_Id");
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.Page", b =>
                {
                    b.HasOne("Fastnet.Webframe.CoreData2.Directory", "Directory")
                        .WithMany("Pages")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.PageDocument", b =>
                {
                    b.HasOne("Fastnet.Webframe.CoreData2.Document", "Document")
                        .WithMany("PageDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fastnet.Webframe.CoreData2.Page", "Page")
                        .WithMany("PageDocuments")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.PageMarkup", b =>
                {
                    b.HasOne("Fastnet.Webframe.CoreData2.Page", "Page")
                        .WithOne("PageMarkup")
                        .HasForeignKey("Fastnet.Webframe.CoreData2.PageMarkup", "PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fastnet.Webframe.CoreData2.PagePage", b =>
                {
                    b.HasOne("Fastnet.Webframe.CoreData2.Page", "FromPage")
                        .WithMany("BackLinks")
                        .HasForeignKey("FromPageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fastnet.Webframe.CoreData2.Page", "ToPage")
                        .WithMany("ForwardLinks")
                        .HasForeignKey("ToPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
